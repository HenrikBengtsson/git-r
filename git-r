#!/usr/bin/env bash
### Git Fork Utility
###
### Usage:
###  git-r [options]* <command>
###
### Commands:
###  configure              Configure
###  svn-revision           Update and display SVN-VERSION
###  build                  Update SVN-REVISION and runs 'make'
###  install
###  svn-diff               Generate a SVN-compatible patch
###  svn-patch              Apply svn-diff patch to SVN repos
###
### Options:
###  --prefix-root <path>   Installation directory.
###                         (default: '$HOME/software/R-devel')
###  --verbose/--no-verbose Control output of extra information
###  --version              Display version
###
### Example:
###  git checkout tags/R-3-6-1
###  git svn-revision
###
###  git checkout R-3-6-branch
###  git r configure --enable-R-shlib --enable-memory-profiling --without-recommended-packages
###  git-r build
###  git-r install
###
###  git-r svn-diff
###  git-r svn-patch
###  svn diff
###
### Version: 0.0.1-9003
### Copyright: Henrik Bengtsson (2017-2019)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
function mecho() { echo "$@" 1>&2; }

function vecho() {
    if $verbose; then
        echo "$@";
    fi
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" "$0" | sed 's/###[ ]*Version:[ ]*//g'
}

function help() {
    local res
    res=$(grep "^###" "$0" | grep -vE '^(####|### whatis: )' | cut -b 5-)
    if [[ ${UCSF_TOOLS} == true ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed 's/git-fork/git fork/')
    fi
    printf '%s\n' "${res[@]}"
}


## Variables
prefix_root="$HOME/software/R-devel"
opts=
verbose=true
cmd=help
skip_svn_revision=false

if [[ $# -eq 0 ]]; then
    help
    exit 0
fi

# Parse command-line options
while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--help" ]]; then
        help
	exit 0
    elif [[ "$1" == "--version" ]]; then
        version
	exit 0
    elif [[ "$1" == "--verbose" ]]; then
        verbose=true
    elif [[ "$1" == "--no-verbose" ]]; then
        verbose=false	
    elif [[ "$1" == "--prefix-root" ]]; then
	shift
        prefix_root="$1"
    elif [[ "$1" == "--skip-svn-revision" ]]; then
	skip_svn_revision=true
    elif [[ "$1" == "configure" ]]; then
	cmd="$1"
    elif [[ "$1" == "build" ]]; then
	cmd="$1"
    elif [[ "$1" == "svn-revision" ]]; then
	cmd="$1"
    elif [[ "$1" == "install" ]]; then
	cmd="$1"
    elif [[ "$1" == "svn-diff" ]]; then
	cmd="$1"
    elif [[ "$1" == "svn-patch" ]]; then
	cmd="$1"
    else
        opts="$opts $1"
    fi
    shift
done

function git_branch() {
    git symbolic-ref HEAD | sed 's!refs\/heads\/!!'
}

function update_svn_revision() {
    if [ ! -f SVN-REVISION ] || ! $skip_svn_revision; then
        printf "Revision: %s\nLast Changed Date: %s\n" "$(git log --format=%B -n 1 | tr '\n' ' ' | sed -E 's/.*git-svn-id: https:\/\/svn.r-project.org\/R\/[^@]*@([0-9]+).*/\1/')" "$(git log -1 --pretty=format:"%ad" --date=iso | sed -E 's/ .*//')" > SVN-REVISION
    fi
}    

vecho "Command: $cmd"
vecho "Options: $opts"

branch=$(git_branch)
vecho "Current branch: $branch"
vecho "Prefix root: $prefix_root"
prefix="$prefix_root/$branch"
vecho "Prefix: $prefix"

if [[ ! -f src/library/base/DESCRIPTION.in ]]; then
    echo "ERROR: Current folder does not look like it holds the R source code: $PWD"
    exit 1
fi

if [[ "$cmd" == "configure" ]]; then
    ./configure --prefix="$prefix" $opts
    sed -n '/^R is now configured/,/^## -----/p' config.log | head -n -2 > config.log.summary
fi				    

if [[ "$cmd" == "svn-revision" ]]; then
    update_svn_revision
    cat SVN-REVISION
fi				    

if [[ "$cmd" == "build" ]]; then
    update_svn_revision
    (cd doc/manual && make front-matter html-non-svn)
    make
fi				    

if [[ "$cmd" == "install" ]]; then
    make install
    res=$?
    if [[ $res -ne 0 ]]; then
	echo "ERROR: R failed to install (exit code $res)"
	exit $res
    fi
    
    echo "R successfully installed: $prefix"
fi				    


if [[ "$cmd" == "svn-diff" ]]; then
    ## In Git repos
    git diff --diff-filter=M --no-prefix trunk > /tmp/r-trunk.patch
    mecho "SVN-compatible patch to trunk written to /tmp/r-trunk.patch:"
    git diff --diff-filter=M --no-prefix trunk
fi

if [[ "$cmd" == "svn-patch" ]]; then
    patch -p0 < /tmp/r-trunk.patch
fi
