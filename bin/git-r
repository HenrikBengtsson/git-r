#!/usr/bin/env bash
### Git R: Build R From GitHub Source
###
### Usage:
###  git-r [options]* <command>
###
### Commands:
###  configure              Configure
###  svn-revision           Update and display SVN-VERSION
###  pull-recommended       Download (rsync) recommended packages
###  build                  Update SVN-REVISION and runs 'make'
###  build-recommended      Build recommended packages
###  install
###  svn-diff               Generate a SVN-compatible patch
###  svn-patch              Apply svn-diff patch to SVN repos
###  prefix                 Output installation path
###
### Options:
###  --prefix-root <path>   Installation directory.
###                         (default: '$HOME/software/R-devel')
###  --verbose/--no-verbose Control output of extra information
###  --version              Display version
###
### Example:
###  git clone https://github.com/wch/r-source.git
###  cd r-source
###  git checkout tags/R-4-0-3
###  git r svn-revision
###
###  git checkout R-4-0-branch
###  git-r pull-recommended
###  git-r configure --enable-R-shlib --enable-memory-profiling
###  git-r build
###  git-r build-recommended
###  git-r install
###
###  git checkout trunk
###  git-r configure --enable-R-shlib --enable-memory-profiling --without-recommended-packages
###  git-r build
###  git-r install --protect
###
###  git-r svn-diff
###  git-r svn-patch
###  svn diff
###
### Required System Libraries:
### * Ubuntu 18.04:
###   sudo apt install xorg-dev libpcre2-dev libcurl4-openssl-dev
###   sudo apt install libreadline-dev libbz2-dev liblzma-dev
###   sudo apt install libjpeg-dev libtiff-dev libcairo2-dev
###   sudo apt install openjdk-11-jdk
###
### References:
### * https://bookdown.org/lionel/contributing/building-r.html
###
### Version: 0.0.1-9006
### Copyright: Henrik Bengtsson (2017-2020)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]

# -------------------------------------------------------------------------
# Output utility functions
# -------------------------------------------------------------------------
function _tput() {
    if [[ $theme == "none" ]]; then
        return
    fi
    tput "$@" 2> /dev/null
}

function mecho() {
    echo "$@" 1>&2;
}

function merror() {
    {
        _tput setaf 1 ## red
        echo "ERROR: $*$info"
        _tput sgr0    ## reset
    } 1>&2
    exit "${EXIT_CODE:-1}"
}

function mwarn() {
    {
        _tput setaf 3 ## yellow
        echo "WARNING: $*"
        _tput sgr0    ## reset
    } 1>&2
}
function minfo() {
    if ! $verbose; then
        return
    fi
    {
        _tput setaf 4 ## blue
        echo "INFO: $*"
        _tput sgr0    ## reset
    } 1>&2
}
function mok() {
    {
        _tput setaf 2 ## green
        echo "OK: $*"
        _tput sgr0    ## reset
    } 1>&2
}

function vecho() {
    if $verbose; then
        mecho "$@"
    fi
}

function chdir() {
    cd "$1" || merror "Failed to change working directory: '$1'"
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" "$0" | sed 's/###[ ]*Version:[ ]*//g'
}

function help() {
    local res
    res=$(grep "^###" "$0" | grep -vE '^(####|### whatis: )' | cut -b 5-)
    if [[ ${UCSF_TOOLS} == true ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed 's/git-fork/git fork/')
    fi
    printf '%s\n' "${res[@]}"
}


## Variables
prefix_root="$HOME/software/R-devel"
build_root="./build"
opts=
verbose=true
cmd=help
skip_svn_revision=false
protect=true

if [[ $# -eq 0 ]]; then
    help
    exit 0
fi

# Parse command-line options
while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--help" ]]; then
        help
        exit 0
    elif [[ "$1" == "--version" ]]; then
        version
        exit 0
    elif [[ "$1" == "--verbose" ]]; then
        verbose=true
    elif [[ "$1" == "--no-verbose" ]]; then
        verbose=false        
    elif [[ "$1" == "--protect" ]]; then
        protect=true
    elif [[ "$1" == "--no-protect" ]]; then
        protect=false        
    elif [[ "$1" == "--prefix-root" ]]; then
        shift
        prefix_root="$1"
    elif [[ "$1" == "--skip-svn-revision" ]]; then
        skip_svn_revision=true
    elif [[ "$1" == "configure" ]]; then
        cmd="$1"
    elif [[ "$1" == "build" ]]; then
        cmd="$1"
    elif [[ "$1" == "pull-recommended" ]]; then
        cmd="$1"
    elif [[ "$1" == "build-recommended" ]]; then
        cmd="$1"
    elif [[ "$1" == "svn-revision" ]]; then
        cmd="$1"
    elif [[ "$1" == "install" ]]; then
        cmd="$1"
    elif [[ "$1" == "prefix" ]]; then
        cmd="$1"
    elif [[ "$1" == "svn-diff" ]]; then
        cmd="$1"
    elif [[ "$1" == "svn-patch" ]]; then
        cmd="$1"
    else
        opts="$opts $1"
    fi
    shift
done

function git_branch() {
    git symbolic-ref HEAD | sed 's!refs\/heads\/!!'
}

function git_svn_revision() {
    revision=$(git log --format=%B -n 1 | grep -F "git-svn-id")
    suffix=""
    if [[ -z "$revision" ]]; then
        revision=$(git log --format=%B -n 50 | grep -F "git-svn-id" | head -1)
        suffix="-9000"
    fi
    revision=$(echo "$revision" | sed -E 's/.*git-svn-id: https:\/\/svn.r-project.org\/R\/[^@]*@([0-9]+).*/\1/')
    echo "$revision$suffix"
}    

function git_date() {
    git log -1 --pretty=format:"%ad" --date=iso | sed -E 's/ .*//'
}

function update_svn_revision() {
    if [ ! -f SVN-REVISION ] || ! $skip_svn_revision; then
        revision=$(git_svn_revision)
        printf "Revision: %s\nLast Changed Date: %s\n" "$revision" "$(git_date)" > SVN-REVISION
    fi
}    

function add_make.SVN-REVISION() {
    {
        echo "#! /usr/bin/env bash"
        echo
        echo "## Don't edit - automatically added by git-r"
        echo      
        echo 'revision=$(git log --format=%B -n 1 | grep -F "git-svn-id")'
        echo 'suffix=""'
        echo 'if [[ -z "$revision" ]]; then'
        echo '    revision=$(git log --format=%B -n 50 | grep -F "git-svn-id" | head -1)'
        echo 'suffix="-9000"'
        echo 'fi'
        echo 'revision=$(echo "$revision" | sed -E "s/.*git-svn-id: https:\/\/svn.r-project.org\/R\/[^@]*@([0-9]+).*/\1/")'
        echo 'printf "Revision: %s\nLast Changed Date: %s\n" "$revision$suffix" "$(git log -1 --pretty=format:"%ad" --date=iso | sed -E "s/ .*//")" > SVN-REVISION'
    } > make.SVN-REVISION
    chmod ugo+x make.SVN-REVISION
}

function add_GNUmakefile() {
    {
        echo "## Don't edit - automatically added by git-r"
        echo
        echo "include Makefile"
        echo
        echo "svnonly:"
        printf "\t@echo Generating SVN-REVISION file && ./make.SVN-REVISION"
    } > GNUmakefile
    add_make.SVN-REVISION
}

branch=$(git_branch)
prefix="$prefix_root/$branch"
branch_flat=$(echo "$branch" | tr '/' '-')
build_path="$build_root/$branch_flat"
mkdir -p "$build_path"

## DEBUG DETAILS
vecho "Command: $cmd"
vecho "Options: $opts"
vecho "Branch: $branch"
vecho "Revision: $(git_svn_revision)"
vecho "Date: $(git_date)"
vecho "Prefix root: $prefix_root"
vecho "Prefix: $prefix"
vecho "Build path: $build_path"

if [[ ! -f src/library/base/DESCRIPTION.in ]]; then
    merror "Current folder does not look like it holds the R source code: $PWD"
fi

if [[ "$cmd" == "configure" ]]; then
    mkdir -p "$build_path"
     chdir "$build_path"
    ../../configure --prefix="$prefix" $opts
    sed -n '/^R is now configured/,/^## -----/p' config.log | head -n -2 > config.log.summary
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "Configuration failed with exit code ${EXIT_CODE}"
    fi
    mok "Configuration successful. See log file '${build_path}/config.log' and log summary '${build_path}/config.log.summary'"
    exit 0
fi                                    

if [[ "$cmd" == "svn-revision" ]]; then
    mkdir -p "$build_path"
    chdir "$build_path"
    update_svn_revision
    EXIT_CODE=$?
    cat SVN-REVISION
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "Updating of SVN-REVISION failed with exit code ${EXIT_CODE}"
    fi
    minfo "Updating of SVN-REVISION successful"
    exit 0
fi                                    

if [[ "$cmd" == "pull-recommended" ]]; then
    mkdir -p "$build_path"
    chdir "$build_path"
    ../../tools/rsync-recommended
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "The download of recommended R packages failed with exit code ${EXIT_CODE}"
    fi
    mok "The download of recommended R packages successful"
    exit 0
fi

if [[ "$cmd" == "build" ]]; then
    chdir "$build_path"
    add_GNUmakefile
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "Creation of GNUmakefile failed with exit code ${EXIT_CODE}"
    fi
#    update_svn_revision
#    (cd doc/manual && make front-matter html-non-svn)
    make
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "Building of R source code failed with exit code ${EXIT_CODE}"
    fi
    mok "Building of R source code successful."
    exit 0
fi                                    

if [[ "$cmd" == "build-recommended" ]]; then
    mkdir -p "$build_path"
    chdir "$build_path"
    ../../tools/rsync-recommended
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "The download of recommended R packages failed with exit code ${EXIT_CODE}"
    fi
    make recommended
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "Building of recommended R packages failed with exit code ${EXIT_CODE}"
    fi
    mok "Building of recommended R packages successful"
    exit 0
fi    


if [[ "$cmd" == "install" ]]; then
    chdir "$build_path"
    chmod u+w -R "$prefix"
    make install
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} -ne 0 ]]; then
        merror "Installation of R failed with exit code $res"
    fi
    if $protect; then
        minfo "Making installation read-only: $prefix"
        chmod ugo-w -R "$prefix"
    fi
    mok "Installation of R successful: $prefix"
    exit 0
fi

if [[ "$cmd" == "prefix" ]]; then
    echo "$prefix"
    exit 0
fi

if [[ "$cmd" == "svn-diff" ]]; then
    ## In Git repos
    git diff --diff-filter=MAD --no-prefix trunk > /tmp/r-trunk.patch
    mok "SVN-compatible patch to trunk written to /tmp/r-trunk.patch:"
    git diff --diff-filter=MAD --no-prefix trunk
    exit 0
fi

if [[ "$cmd" == "svn-patch" ]]; then
    patch -p0 < /tmp/r-trunk.patch
    exit 0
fi


merror "Unknown git r <command>: '$cmd'"

